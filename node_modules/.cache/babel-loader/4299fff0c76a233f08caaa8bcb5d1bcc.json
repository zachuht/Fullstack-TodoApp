{"ast":null,"code":"import _objectSpread from \"/Users/zachuht/Documents/studyDocs/advancedWebDev/React/toDoApp/todos-frontend/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nvar _jsxFileName = \"/Users/zachuht/Documents/studyDocs/advancedWebDev/React/toDoApp/todos-frontend/src/TodoList.js\";\nimport React, { Component } from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nimport * as apiCalls from './api';\nconst APIURL = '/api/todos/';\n\nclass TodoList extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      todos: []\n    };\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentWillMount() {\n    this.loadTodos();\n  }\n\n  async loadTodos() {\n    let todos = await apiCalls.getTodos();\n    this.setState({\n      todos\n    });\n  }\n\n  async addTodo(val) {\n    let newTodo = await apiCalls.createTodo(val);\n    this.setState({\n      todos: [...this.state.todos, newTodo]\n    });\n  }\n\n  async deleteTodo(id) {\n    await apiCalls.removeTodo(id);\n    const todos = this.state.todos.filter(todo => todo._id !== id);\n    this.setState({\n      todos: todos\n    });\n  }\n\n  toggleTodo(todo) {\n    const updateURL = APIURL + todo._id;\n    fetch(updateURL, {\n      method: 'put',\n      headers: new Headers({\n        'Content-Type': 'application/json'\n      }),\n      body: JSON.stringify({\n        completed: !todo.completed\n      })\n    }).then(resp => {\n      if (!resp.ok) {\n        if (resp.status >= 400 && resp.status < 500) {\n          return resp.json().then(data => {\n            let err = {\n              errorMessage: data.message\n            };\n            throw err;\n          });\n        } else {\n          let err = {\n            errorMessage: 'Server not responding!'\n          };\n          throw err;\n        }\n      }\n\n      return resp.json();\n    }).then(updatedTodo => {\n      const todos = this.state.todos.map(t => t._id === updatedTodo._id ? _objectSpread({}, t, {\n        completed: !t.completed\n      }) : t);\n      this.setState({\n        todos: todos\n      });\n    });\n  }\n\n  render() {\n    const todos = this.state.todos.map(t => React.createElement(TodoItem, Object.assign({\n      key: t._id\n    }, t, {\n      onDelete: this.deleteTodo.bind(this, t._id),\n      onToggle: this.toggleTodo.bind(this, t),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 71\n      },\n      __self: this\n    })));\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 79\n      },\n      __self: this\n    }, React.createElement(\"h1\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 80\n      },\n      __self: this\n    }, \"Todo List!\"), React.createElement(TodoForm, {\n      addTodo: this.addTodo,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 81\n      },\n      __self: this\n    }), React.createElement(\"ul\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 84\n      },\n      __self: this\n    }, todos));\n  }\n\n}\n\nexport default TodoList;","map":{"version":3,"sources":["/Users/zachuht/Documents/studyDocs/advancedWebDev/React/toDoApp/todos-frontend/src/TodoList.js"],"names":["React","Component","TodoItem","TodoForm","apiCalls","APIURL","TodoList","constructor","props","state","todos","addTodo","bind","componentWillMount","loadTodos","getTodos","setState","val","newTodo","createTodo","deleteTodo","id","removeTodo","filter","todo","_id","toggleTodo","updateURL","fetch","method","headers","Headers","body","JSON","stringify","completed","then","resp","ok","status","json","data","err","errorMessage","message","updatedTodo","map","t","render"],"mappings":"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","sourcesContent":["import React, {Component} from 'react';\nimport TodoItem from './TodoItem';\nimport TodoForm from './TodoForm';\nimport * as apiCalls from './api';\nconst APIURL = '/api/todos/';\n\nclass TodoList extends Component {\n  constructor(props){\n    super(props);\n    this.state = {\n      todos: []\n    }\n    this.addTodo = this.addTodo.bind(this);\n  }\n\n  componentWillMount(){\n    this.loadTodos();\n  }\n\n  async loadTodos(){\n    let todos = await apiCalls.getTodos();\n    this.setState({todos});\n  }\n\n  async addTodo(val){\n    let newTodo = await apiCalls.createTodo(val);\n    this.setState({todos: [...this.state.todos, newTodo]})\n  }\n\n  async deleteTodo(id){\n    await apiCalls.removeTodo(id);\n    const todos = this.state.todos.filter(todo => todo._id !== id);\n    this.setState({todos: todos});\n  }\n\n  toggleTodo(todo){\n    const updateURL = APIURL + todo._id;\n    fetch(updateURL, {\n      method: 'put',\n      headers: new Headers({\n        'Content-Type': 'application/json',\n      }),\n      body: JSON.stringify({completed: !todo.completed})\n    })\n    .then(resp => {\n      if(!resp.ok) {\n        if(resp.status >= 400 && resp.status < 500){\n          return resp.json().then(data => {\n            let err = {errorMessage: data.message};\n            throw err;\n          })\n        } else {\n          let err = {errorMessage: 'Server not responding!'};\n          throw err;\n        }\n      }\n      return resp.json();\n    })\n    .then(updatedTodo => {\n      const todos = this.state.todos.map(t =>\n        (t._id === updatedTodo._id)\n        ? {...t, completed: !t.completed}\n        : t\n        )\n      this.setState({todos: todos});\n    });\n  }\n\n  render() {\n    const todos = this.state.todos.map((t) => (\n      <TodoItem \n        key={t._id}\n        {...t}\n        onDelete={this.deleteTodo.bind(this, t._id)}\n        onToggle={this.toggleTodo.bind(this, t)}\n      />\n    ));\n    return(\n      <div>\n        <h1>Todo List!</h1>\n        <TodoForm\n          addTodo={this.addTodo}\n        />\n        <ul>\n          {todos}\n        </ul>\n      </div>\n    ); \n  }\n}\n\nexport default TodoList;"]},"metadata":{},"sourceType":"module"}