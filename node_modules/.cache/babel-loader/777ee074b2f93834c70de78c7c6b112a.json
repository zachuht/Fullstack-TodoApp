{"ast":null,"code":"const APIURL = '/api/todos/';\nexport async function getTodos() {\n  return fetch(APIURL).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Server not responding!'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function createTodo(val) {\n  return fetch(APIURL, {\n    method: 'post',\n    headers: new Headers({\n      'Content-Type': 'application/json'\n    }),\n    body: JSON.stringify({\n      name: val\n    })\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Server not responding!'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}\nexport async function removeTodo(id) {\n  const deleteURL = APIURL + id;\n  return fetch(deleteURL, {\n    method: 'delete'\n  }).then(resp => {\n    if (!resp.ok) {\n      if (resp.status >= 400 && resp.status < 500) {\n        return resp.json().then(data => {\n          let err = {\n            errorMessage: data.message\n          };\n          throw err;\n        });\n      } else {\n        let err = {\n          errorMessage: 'Server not responding!'\n        };\n        throw err;\n      }\n    }\n\n    return resp.json();\n  });\n}","map":{"version":3,"sources":["/Users/zachuht/Documents/studyDocs/advancedWebDev/React/toDoApp/todos-frontend/src/api.js"],"names":["APIURL","getTodos","fetch","then","resp","ok","status","json","data","err","errorMessage","message","createTodo","val","method","headers","Headers","body","JSON","stringify","name","removeTodo","id","deleteURL"],"mappings":"AAAA,MAAMA,MAAM,GAAG,aAAf;AAEA,OAAO,eAAeC,QAAf,GAA0B;AAC/B,SAAOC,KAAK,CAACF,MAAD,CAAL,CACNG,IADM,CACDC,IAAI,IAAI;AACZ,QAAG,CAACA,IAAI,CAACC,EAAT,EAAa;AACX,UAAGD,IAAI,CAACE,MAAL,IAAe,GAAf,IAAsBF,IAAI,CAACE,MAAL,GAAc,GAAvC,EAA2C;AACzC,eAAOF,IAAI,CAACG,IAAL,GAAYJ,IAAZ,CAAiBK,IAAI,IAAI;AAC9B,cAAIC,GAAG,GAAG;AAACC,YAAAA,YAAY,EAAEF,IAAI,CAACG;AAApB,WAAV;AACA,gBAAMF,GAAN;AACD,SAHM,CAAP;AAID,OALD,MAKO;AACL,YAAIA,GAAG,GAAG;AAACC,UAAAA,YAAY,EAAE;AAAf,SAAV;AACA,cAAMD,GAAN;AACD;AACF;;AACD,WAAOL,IAAI,CAACG,IAAL,EAAP;AACD,GAdM,CAAP;AAeD;AAED,OAAO,eAAeK,UAAf,CAA0BC,GAA1B,EAA+B;AACpC,SAAOX,KAAK,CAACF,MAAD,EAAS;AACnBc,IAAAA,MAAM,EAAE,MADW;AAEnBC,IAAAA,OAAO,EAAE,IAAIC,OAAJ,CAAY;AACnB,sBAAgB;AADG,KAAZ,CAFU;AAKnBC,IAAAA,IAAI,EAAEC,IAAI,CAACC,SAAL,CAAe;AAACC,MAAAA,IAAI,EAAEP;AAAP,KAAf;AALa,GAAT,CAAL,CAONV,IAPM,CAODC,IAAI,IAAI;AACZ,QAAG,CAACA,IAAI,CAACC,EAAT,EAAa;AACX,UAAGD,IAAI,CAACE,MAAL,IAAe,GAAf,IAAsBF,IAAI,CAACE,MAAL,GAAc,GAAvC,EAA2C;AACzC,eAAOF,IAAI,CAACG,IAAL,GAAYJ,IAAZ,CAAiBK,IAAI,IAAI;AAC9B,cAAIC,GAAG,GAAG;AAACC,YAAAA,YAAY,EAAEF,IAAI,CAACG;AAApB,WAAV;AACA,gBAAMF,GAAN;AACD,SAHM,CAAP;AAID,OALD,MAKO;AACL,YAAIA,GAAG,GAAG;AAACC,UAAAA,YAAY,EAAE;AAAf,SAAV;AACA,cAAMD,GAAN;AACD;AACF;;AACD,WAAOL,IAAI,CAACG,IAAL,EAAP;AACD,GApBM,CAAP;AAqBD;AAED,OAAO,eAAec,UAAf,CAA0BC,EAA1B,EAA8B;AACnC,QAAMC,SAAS,GAAGvB,MAAM,GAAGsB,EAA3B;AACE,SAAOpB,KAAK,CAACqB,SAAD,EAAY;AACtBT,IAAAA,MAAM,EAAE;AADc,GAAZ,CAAL,CAGNX,IAHM,CAGDC,IAAI,IAAI;AACZ,QAAG,CAACA,IAAI,CAACC,EAAT,EAAa;AACX,UAAGD,IAAI,CAACE,MAAL,IAAe,GAAf,IAAsBF,IAAI,CAACE,MAAL,GAAc,GAAvC,EAA2C;AACzC,eAAOF,IAAI,CAACG,IAAL,GAAYJ,IAAZ,CAAiBK,IAAI,IAAI;AAC9B,cAAIC,GAAG,GAAG;AAACC,YAAAA,YAAY,EAAEF,IAAI,CAACG;AAApB,WAAV;AACA,gBAAMF,GAAN;AACD,SAHM,CAAP;AAID,OALD,MAKO;AACL,YAAIA,GAAG,GAAG;AAACC,UAAAA,YAAY,EAAE;AAAf,SAAV;AACA,cAAMD,GAAN;AACD;AACF;;AACD,WAAOL,IAAI,CAACG,IAAL,EAAP;AACD,GAhBM,CAAP;AAiBH","sourcesContent":["const APIURL = '/api/todos/';\n\nexport async function getTodos() {\n  return fetch(APIURL)\n  .then(resp => {\n    if(!resp.ok) {\n      if(resp.status >= 400 && resp.status < 500){\n        return resp.json().then(data => {\n          let err = {errorMessage: data.message};\n          throw err;\n        })\n      } else {\n        let err = {errorMessage: 'Server not responding!'};\n        throw err;\n      }\n    }\n    return resp.json();\n  });\n}\n\nexport async function createTodo(val) {\n  return fetch(APIURL, {\n    method: 'post',\n    headers: new Headers({\n      'Content-Type': 'application/json',\n    }),\n    body: JSON.stringify({name: val})\n  })\n  .then(resp => {\n    if(!resp.ok) {\n      if(resp.status >= 400 && resp.status < 500){\n        return resp.json().then(data => {\n          let err = {errorMessage: data.message};\n          throw err;\n        })\n      } else {\n        let err = {errorMessage: 'Server not responding!'};\n        throw err;\n      }\n    }\n    return resp.json();\n  })\n}\n\nexport async function removeTodo(id) {\n  const deleteURL = APIURL + id;\n    return fetch(deleteURL, {\n      method: 'delete'\n    })\n    .then(resp => {\n      if(!resp.ok) {\n        if(resp.status >= 400 && resp.status < 500){\n          return resp.json().then(data => {\n            let err = {errorMessage: data.message};\n            throw err;\n          })\n        } else {\n          let err = {errorMessage: 'Server not responding!'};\n          throw err;\n        }\n      }\n      return resp.json();\n    })\n}"]},"metadata":{},"sourceType":"module"}